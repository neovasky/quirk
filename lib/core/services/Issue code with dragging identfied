// Task_Service (Faulty code)

import 'dart:convert';
import 'package:flutter/foundation.dart';
import 'package:shared_preferences/shared_preferences.dart';
import '../models/task.dart';
import '../models/task_priority.dart';
import '../models/task_filter.dart';

class TaskService extends ChangeNotifier {
  static const String _storageKey = 'tasks';
  static const String _labelsKey = 'labels';
  List<Task> _tasks = [];
  List<Label> _labels = [];
  SharedPreferences? _prefs;
  bool _initialized = false;
  final TaskFilter _currentFilter = const TaskFilter();

  TaskService() {
    _initPrefs();
  }

  // Getters - keeping all existing getters
  List<Task> get tasks => List.unmodifiable(_tasks);
  List<Task> get completedTasks => _tasks.where((task) => task.completed).toList();
  List<Task> get pendingTasks => _tasks.where((task) => !task.completed).toList();
  List<Label> get labels => List.unmodifiable(_labels);
  bool get isInitialized => _initialized;
  TaskFilter get currentFilter => _currentFilter;

  // Label Operations - adding these to properly use _saveLabels
  Future<void> addLabel(Label label) async {
    if (!_labels.any((l) => l.id == label.id)) {
      _labels.add(label);
      await _saveLabels();
    }
  }

  Future<void> updateLabel(Label label) async {
    final index = _labels.indexWhere((l) => l.id == label.id);
    if (index != -1) {
      _labels[index] = label;
      await _saveLabels();
    }
  }

  Future<void> deleteLabel(String labelId) async {
    _labels.removeWhere((label) => label.id == labelId);
    await _saveLabels();
  }

  Future<void> addLabelToTask(String taskId, String labelId) async {
    final taskIndex = _tasks.indexWhere((t) => t.id == taskId);
    if (taskIndex != -1) {
      final task = _tasks[taskIndex];
      if (!task.labels.contains(labelId)) {
        final updatedTask = task.copyWith(
          labels: [...task.labels, labelId],
        );
        _tasks[taskIndex] = updatedTask;
        await _saveTasks();
      }
    }
  }

  Future<void> removeLabelFromTask(String taskId, String labelId) async {
    final taskIndex = _tasks.indexWhere((t) => t.id == taskId);
    if (taskIndex != -1) {
      final task = _tasks[taskIndex];
      final updatedTask = task.copyWith(
        labels: task.labels.where((id) => id != labelId).toList(),
      );
      _tasks[taskIndex] = updatedTask;
      await _saveTasks();
    }
  }

  // Keeping all existing task filtering and sorting logic
  List<Task> getFilteredAndSortedTasks([TaskFilter? filter]) {
    filter ??= _currentFilter;
    
    var filteredTasks = _tasks.where((task) => filter!.matches(task)).toList();

    filteredTasks.sort((a, b) {
      int priorityCompare = b.priority.index.compareTo(a.priority.index);
      if (priorityCompare != 0) return priorityCompare;

      if (a.dueDate != null && b.dueDate != null) {
        return a.dueDate!.compareTo(b.dueDate!);
      } else if (a.dueDate != null) {
        return -1;
      } else if (b.dueDate != null) {
        return 1;
      }

      return b.createdAt.compareTo(a.createdAt);
    });

    return filteredTasks;
  }

  // Keeping existing initialization methods
  Future<void> _initPrefs() async {
    _prefs = await SharedPreferences.getInstance();
    await Future.wait([
      _loadTasks(),
      _loadLabels(),
    ]);
    _initialized = true;
    notifyListeners();
  }

  Future<void> _loadTasks() async {
    final prefs = _prefs;
    if (prefs == null) return;

    try {
      final tasksJson = prefs.getStringList(_storageKey) ?? [];
      _tasks = tasksJson
          .map((json) => Task.fromJson(jsonDecode(json)))
          .toList();
      _sortTasksByPriority();
    } catch (e) {
      debugPrint('Error loading tasks: $e');
      _tasks = [];
    }
  }

  Future<void> _loadLabels() async {
    final prefs = _prefs;
    if (prefs == null) return;

    try {
      final labelsJson = prefs.getStringList(_labelsKey) ?? [];
      _labels = labelsJson
          .map((json) => Label.fromJson(jsonDecode(json)))
          .toList();
    } catch (e) {
      debugPrint('Error loading labels: $e');
      _labels = [];
    }
  }

  Future<void> _saveTasks() async {
    final prefs = _prefs;
    if (prefs == null) return;

    try {
      _sortTasksByPriority();
      final tasksJson = _tasks
          .map((task) => jsonEncode(task.toJson()))
          .toList();
      await prefs.setStringList(_storageKey, tasksJson);
      notifyListeners();
    } catch (e) {
      debugPrint('Error saving tasks: $e');
    }
  }

  Future<void> _saveLabels() async {
    final prefs = _prefs;
    if (prefs == null) return;

    try {
      final labelsJson = _labels
          .map((label) => jsonEncode(label.toJson()))
          .toList();
      await prefs.setStringList(_labelsKey, labelsJson);
      notifyListeners();
    } catch (e) {
      debugPrint('Error saving labels: $e');
    }
  }

  void _sortTasksByPriority() {
    _tasks.sort((a, b) {
      int priorityCompare = b.priority.index.compareTo(a.priority.index);
      if (priorityCompare != 0) return priorityCompare;

      if (a.dueDate != null && b.dueDate != null) {
        return a.dueDate!.compareTo(b.dueDate!);
      }

      return b.createdAt.compareTo(a.createdAt);
    });
  }

  // Keeping all existing task operations
  Future<void> addTask(Task task) async {
    _tasks.add(task);
    await _saveTasks();
  }

  Future<void> updateTask(Task task) async {
    final index = _tasks.indexWhere((t) => t.id == task.id);
    if (index != -1) {
      _tasks[index] = task;
      await _saveTasks();
    }
  }

  Future<void> deleteTask(String taskId) async {
    _tasks.removeWhere((task) => task.id == taskId);
    await _saveTasks();
  }

  Future<void> toggleTaskCompletion(String taskId) async {
    final index = _tasks.indexWhere((t) => t.id == taskId);
    if (index != -1) {
      final task = _tasks[index];
      final updatedTask = task.copyWith(completed: !task.completed);
      _tasks[index] = updatedTask;
      await _saveTasks();
    }
  }

  // Keeping all existing query methods
  List<Task> getTasksByProject(String project) {
    var tasks = _tasks.where((task) => task.project == project).toList();
    _sortTasksByPriority();
    return tasks;
  }

  List<Task> getTasksByPriority(TaskPriority priority) {
    return _tasks.where((task) => task.priority == priority).toList();
  }

  List<Task> getOverdueTasks() {
    var tasks = _tasks.where((task) => task.isOverdue).toList();
    _sortTasksByPriority();
    return tasks;
  }

  List<Task> getUpcomingTasks({Duration window = const Duration(days: 7)}) {
    final now = DateTime.now();
    final cutoff = now.add(window);
    var tasks = _tasks.where((task) => 
      !task.completed && 
      task.dueDate != null &&
      task.dueDate!.isBefore(cutoff)).toList();
    _sortTasksByPriority();
    return tasks;
  }

  Set<String> get projects { 
    return _tasks
        .where((task) => task.project != null)
        .map((task) => task.project!)
        .toSet();
  }

  Future<void> reorderTasks(int oldIndex, int newIndex) async {
    try {
      if (oldIndex < 0 || oldIndex >= _tasks.length || 
          newIndex < 0 || newIndex >= _tasks.length) {
        throw RangeError('Invalid index for reordering');
      }
      
      final task = _tasks.removeAt(oldIndex);
      _tasks.insert(newIndex, task);
      
      await _saveTasks();
      notifyListeners();
    } catch (e) {
      debugPrint('Error reordering tasks: $e');
      rethrow;
    }
  }
}

